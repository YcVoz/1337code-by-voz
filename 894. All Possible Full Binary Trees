/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> allPossibleFBT(int n) {
        if(n==2)
            return vector<TreeNode*>(0);
        vector<vector<TreeNode*>> v1(n+1);
        TreeNode* root = new TreeNode(0);
        v1[1].emplace_back(root);
        for(int i=3;i<=n;i++){
            for(int leftNode = 1;leftNode<i;leftNode++){
                int rightNode = i - leftNode - 1;
                for(int a = 0;a<v1[leftNode].size();a++){
                    for(int b=0;b<v1[rightNode].size();b++){
                        TreeNode* temRoot = new TreeNode(0);
                        temRoot->left = v1[leftNode][a];
                        temRoot->right = v1[rightNode][b];
                        v1[i].emplace_back(temRoot);
                    }
                }
            }
        }
        return v1[n];
    }
};
