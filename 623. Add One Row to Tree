/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int v, int d) {
        if(d==1)
        {
            TreeNode* tem = new TreeNode(v);
            tem->left = root;
            return tem;
        }
        vector<vector<TreeNode*>> queue1(2);
        bool nowQueue = 1;
        queue1[0].resize(1);
        queue1[1].resize(0);
        int nowD = 1;
        queue1[0][0] = root;
        while(nowD!=d)
        {
            nowQueue = !nowQueue;
            nowD++;
            queue1[!nowQueue].resize(0);
            for(int i=0;i<queue1[nowQueue].size();i++)
            {
                if(queue1[nowQueue][i]->left!=NULL)
                    queue1[!nowQueue].emplace_back(queue1[nowQueue][i]->left);
                if(queue1[nowQueue][i]->right!=NULL)
                    queue1[!nowQueue].emplace_back(queue1[nowQueue][i]->right);
            }
        }
        if(queue1[!nowQueue].size()==0)
        {
            for(int i=0;i<queue1[nowQueue].size();i++)
            {
                queue1[nowQueue][i]->left = new TreeNode(v);
                queue1[nowQueue][i]->right = new TreeNode(v);                
            }
            return root;
        }
        for(int i=0;i<queue1[nowQueue].size();i++)
        {
            TreeNode* tem = queue1[nowQueue][i]->left;
            queue1[nowQueue][i]->left = new TreeNode(v);
            if(tem!=NULL)
            {
                queue1[nowQueue][i]->left->left = tem;
            }
            tem = queue1[nowQueue][i]->right;
            queue1[nowQueue][i]->right = new TreeNode(v);
            if(tem!=NULL)
            {
                queue1[nowQueue][i]->right->right = tem;
            }
        }
        return root;
    }
};
