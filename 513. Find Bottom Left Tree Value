/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        vector<vector<TreeNode*>> queue(2);
        queue[0].resize(1);    
        queue[0][0] = root;
        queue[1].resize(0);
        bool thisTurnQueue = 0;       
        while(queue[thisTurnQueue].size()!=0)
        {
            queue[!thisTurnQueue].resize(0);
            for(int i=0;i<queue[thisTurnQueue].size();i++)
            {
                if(queue[thisTurnQueue][i]->left!=NULL)
                {
                    queue[!thisTurnQueue].emplace_back(queue[thisTurnQueue][i]->left);
                }
                if(queue[thisTurnQueue][i]->right!=NULL)
                {
                    queue[!thisTurnQueue].emplace_back(queue[thisTurnQueue][i]->right);
                }
            }            
            thisTurnQueue = !thisTurnQueue;            
        }
        return queue[!thisTurnQueue][0]->val;
    }
};
