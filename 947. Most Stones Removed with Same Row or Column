class Solution {
private:
    vector<int>father;
    int findFather(int x)
    {
        return x == father[x] ? x : (father[x] = findFather(father[x]));
    }
    void Union(int x, int y)
    {
        x = findFather(x);
        y = findFather(y);
        if (x<y) father[y] = x;
        else father[x] = y;
    } 
public:
    int removeStones(vector<vector<int>>& stones) {
        unordered_map<int,int> m1_x;
        unordered_map<int,int> m1_y;
        father.resize(stones.size());
        for(int i=0;i<stones.size();i++){
            father[i] = i;
            if((m1_x.find(stones[i][0]))!=m1_x.end())
                Union(i,m1_x[stones[i][0]]);
            if(m1_y.find(stones[i][1])!=m1_y.end())
                Union(i,m1_y[stones[i][1]]);
            m1_x[stones[i][0]] = i;
            m1_y[stones[i][1]] = i;
        }
        unordered_map<int,bool> group;
        int ans = 0;
        for(int i=0;i<stones.size();i++){
            if(group.find(findFather(i))==group.end()){
                ans++;
                group[findFather(i)] = 1;
            }
        }
        return stones.size()-ans;
    }
};
