/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if(root==NULL)
        {
            vector<vector<int>>output(0);
            return output;
        }
        bool IsStack = 0;
        vector<vector<TreeNode*>> queueThanStack(2);
        queueThanStack[0].resize(0);
        queueThanStack[1].resize(0);
        
        vector<vector<int>> output(0);
        queueThanStack[0].emplace_back(root);
        bool tag = 1;
        while(tag)      
        {            
            vector<int> tem = getALevel(IsStack,queueThanStack);
            if(tem.size()!=0)
            {                
                output.emplace_back(tem);
            }
            else
            {
                tag = 0;
            }
            IsStack = !IsStack;
        }
        return output;
    }
    vector<int> getALevel(bool IsStack, vector<vector<TreeNode*>>& queueThanStack)
    {             
        vector<int> output(0);
        if(queueThanStack[IsStack].size() == 0)
        {
            return output;
        }
        for(int i=0;i<queueThanStack[IsStack].size();i++)
        {
            if(queueThanStack[IsStack][i]->left!=NULL)
            {
                queueThanStack[!IsStack].emplace_back(queueThanStack[IsStack][i]->left);
            }
            if(queueThanStack[IsStack][i]->right!=NULL)
            {
                queueThanStack[!IsStack].emplace_back(queueThanStack[IsStack][i]->right);
            }
        }
        for(int i=0;i<queueThanStack[IsStack].size();i++)
        {
            int index = i;
            if(IsStack)
            {
                index = queueThanStack[IsStack].size()-i-1;
            }
            output.emplace_back(queueThanStack[IsStack][index]->val);
        }
        queueThanStack[IsStack].resize(0);
        return output;
    }
};
