class Solution {
public:
    int longestBeautifulSubstring(string word) {
        map<char,int> m1;
        m1['a'] = 0;
        m1['e'] = 1;
        m1['i'] = 2;
        m1['o'] = 3;
        m1['u'] = 4;
        int nowOrderIs = -1;
        int startIndex = -1;
        int ans = 0;
        for(int i=0;i<word.size();i++)
        {
            if(nowOrderIs==-1)
            {
                if(m1[word[i]]==0)
                {
                    startIndex = i;
                    nowOrderIs = 0;
                }
            }
            else
            {
                if(m1[word[i]]==nowOrderIs)
                    ;
                else if(m1[word[i]]==nowOrderIs+1)
                    nowOrderIs++;
                else if(nowOrderIs==4)
                {
                    ans = max(ans,i-startIndex);
                    nowOrderIs = -1;
                    if(m1[word[i]]==0)
                    {
                        startIndex = i;
                        nowOrderIs = 0;                        
                    }
                }
                else if(m1[word[i]]==0)
                {
                    startIndex = i;
                    nowOrderIs = 0;
                }
                else
                    nowOrderIs = -1;                
            }            
        }
        return  ((word.size()-startIndex>ans)&&nowOrderIs==4)?word.size()-startIndex:ans;
    }
};
