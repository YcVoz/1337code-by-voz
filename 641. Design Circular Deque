class MyCircularDeque {
public:
    /** Initialize your data structure here. Set the size of the deque to be k. */
    int front = 0;
    int end = 0;
    bool issEmpty = 1;
    vector<int> v;
    MyCircularDeque(int k) {
        v.resize(k);
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    bool insertFront(int value) {
        if(isFull())
            return 0;
        if(isEmpty())
        {
            v[front] = value;
            issEmpty = 0;
            return 1;
        }
        if(front == 0)
            front = v.size();
        v[front-1] = value;
        front--;
        return 1;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    bool insertLast(int value) {
        if(isFull())
            return 0;
        if(isEmpty())
        {
            v[end] = value;
            issEmpty = 0;
            return 1;
        }
        if(end == v.size()-1)
            end = -1;
        v[end+1] = value;
        end++;       
        return 1; 
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    bool deleteFront() {
        if(isEmpty())
            return 0;
        if(end==front)
        {
            issEmpty = 1;
        }
        else
        {
            if(front == v.size()-1)
                front = -1;
            front++;
        }
        return 1;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    bool deleteLast() {
        if(isEmpty())
            return 0;
        if(end==front)
        {
            issEmpty = 1;
        }
        else
        {
            if(end == 0)
                end = v.size();
            end--;
        }
        return 1;
    }
    
    /** Get the front item from the deque. */
    int getFront() {
        if(isEmpty())
            return -1;
        return v[front];
    }
    
    /** Get the last item from the deque. */
    int getRear() {
        if(isEmpty())
            return -1;
        return v[end];
    }
    
    /** Checks whether the circular deque is empty or not. */
    bool isEmpty() {
        return issEmpty;
    }
    
    /** Checks whether the circular deque is full or not. */
    bool isFull() {
        //cout<<front<<" "<<end<<" "<<(end+1)%v.size()<<endl;
        return (end+1)%v.size()==front;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */
