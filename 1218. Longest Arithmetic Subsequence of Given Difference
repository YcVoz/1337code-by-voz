class Solution {
public:
    int longestSubsequence(vector<int>& arr, int difference) {
        int ans = 0;
        if(difference==0)
        {
            map<int,int> m1;
            for(int i=0;i<arr.size();i++)
                m1[arr[i]]++;
            for(auto iter = m1.begin();iter!=m1.end();iter++)
                ans = max(ans,iter->second);
            return ans;
        }
        if(difference<0)
        {
            difference *= (-1);
            for(int i=0;i<arr.size()/2;i++)
            {
                arr[i]^=arr[arr.size()-i-1];
                arr[arr.size()-i-1]^=arr[i];
                arr[i]^=arr[arr.size()-i-1];
            }
        }
        vector<vector<int>> v1(difference,vector<int>(20001/difference+1));
        for(int i =0;i<arr.size();i++)
        {          
            int a = arr[i]+10000;
            int slot = a%difference;  
            a /= difference;
            v1[slot][a] = (a>0)?v1[slot][a-1]+1:1;
            ans = max(ans,v1[slot][a]);    
        }
        return ans;
    }
};
