class Solution {
public:
    vector<vector<vector<int>>> memory;
    int allProfile;
    int profitableSchemes(int G, int P, vector<int>& group, vector<int>& profit) {
        vector<pair<int,int>> folder;
        allProfile = profit.size();
        for(int i=0;i<allProfile;i++)
        {
            pair<int,int> z1(group[i],profit[i]);
            folder.emplace_back(z1);
        }
        sort(folder.begin(),folder.end());
        bool tag = 1;
        for(int i=0;i<allProfile&&tag;i++)
        {
            if(folder[i].first>G)
            {
                folder.resize(i);
                tag = 0;
                allProfile = i;
            }
        }
        if(allProfile==0)
            return 0;
        memory.resize(G+1);
        for(int i=0;i<G+1;i++)
        {
            memory[i].resize(P+1);
            for(int u=0;u<P+1;u++)
            {
                memory[i][u].resize(allProfile+1);
            }
        }
        for(int i=0;i<=G;i++)
        {
            for(int u=0;u<=P;u++)
            {                
                if(i>=folder[allProfile-1].first)
                {
                    if(u>folder[allProfile-1].second)
                    {
                        memory[i][u][1] = 0;
                    }
                    else
                    {
                        if(u==0)
                            memory[i][u][1] = 2;
                        else
                            memory[i][u][1] = 1;                          
                    }
                }
                else
                {
                    if(u==0)
                    {
                        memory[i][u][1] = 1;
                    }
                    else
                    {
                        memory[i][u][1] = 0;
                    }
                }
            }
        }
        for(int n=1;n<allProfile;n++)
        {
            memory[0][0][n] = 1;
        }
        for(int n = 2;n<=allProfile;n++)
        {
            for(int i=1;i<=G;i++)
            {
                for(int u=0;u<=P;u++)
                {
                    if(i>=folder[allProfile-n].first)
                    {                        
                        int newu = u-folder[allProfile-n].second;
                        if(newu<0)
                            newu = 0;                        
                        memory[i][u][n]=(memory[i][u][n-1]+memory[i-folder[allProfile-n].first][newu][n-1])%1000000007;  
                    }
                    else
                    {
                        memory[i][u][n]=(memory[i][u][n-1])%1000000007;
                    }
                }
            }
        }
        return memory[G][P][allProfile]%1000000007;
    }
};
