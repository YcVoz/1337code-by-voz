/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:    
    int rob(TreeNode* root) {
        pair<int, int> p2 = maxn(root);
        return max(p2.first,p2.second);
    }
    pair<int,int> maxn(TreeNode* root)//pair<root inclued,no root>
    {
        if(root==NULL)
        {
            return {0,0};
        }
        else
        {
            if((root->left==NULL)&&(root->right==NULL))
            {
                return {root->val,0};
            }
            else if(root->left==NULL)
            {
                pair<int, int> p2 = maxn(root->right);                
                return {root->val+p2.second,max(p2.second,p2.first)};
            }
            else if(root->right==NULL)
            {
                pair<int, int> p2 = maxn(root->left);
                return {root->val+p2.second,max(p2.second,p2.first)};
            }
            else
            {
                pair<int, int> p1 = maxn(root->left);
                pair<int, int> p2 = maxn(root->right);
                return {root->val+p2.second+p1.second,max(p2.second,p2.first)+max(p1.second,p1.first)};
            }
                
        }
    }
};
