/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:        
    vector<int> root2vector(TreeNode* root1){   
        
        vector<int> r;
        if(root1==NULL)
        {
            return r;
        }
        vector<int> b;
        if(root1->left!=NULL)
        {
            r= root2vector(root1->left);
        }   
        if(root1->right!=NULL)
        {
            b = root2vector(root1->right);
        }                   
        r.push_back(root1->val);     
        r.insert(r.end(), b.begin(), b.end());

        return r;
        
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {        
        vector<int> r = root2vector(root1);
        vector<int> b = root2vector(root2);
        vector<int> output;
        /*
        r.insert(r.end(), b.begin(), b.end());
        sort(r.begin(),r.end());
        return r;*/
        int indexr = 0;
        int sizer = r.size();
        int indexb = 0;
        int sizeb = b.size();
        while(1)
        {
            if(indexr!=sizer&&indexb!=sizeb)
            {
                if(r[indexr]>b[indexb])
                {
                    output.push_back(b[indexb]);
                    indexb++;
                }
                else
                {
                    output.push_back(r[indexr]);
                    indexr++;
                }
            }
            else if(indexr!=sizer)
            {
                output.push_back(r[indexr]);
                indexr++;
            }
            else if(indexb!=sizeb)
            {
                output.push_back(b[indexb]);
                indexb++;
            }
            else
            {
                return output;
            }
        }
    }
 
};
