/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        getSubtreeNum(root);
        while(1)
        {
            if(root->left!=NULL)
            {
                if(root->left->val/100000<k-1)
                {
                    k -= root->left->val/100000+1;
                    root = root->right;
                }
                else if(root->left->val/100000>k-1)
                    root = root->left;
                else
                    return root->val%100000;
            }
            else
            {
                if(k==1)
                    return root->val%100000;
                else
                    root = root->right;
                k --;
            }
        }
        return -1;
    }
    int getSubtreeNum(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        int treeNode_c = getSubtreeNum(root->left)+getSubtreeNum(root->right)+1;
        root->val += treeNode_c*100000;
        return treeNode_c;
    }
};
