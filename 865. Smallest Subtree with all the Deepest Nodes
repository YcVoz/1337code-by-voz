/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*, int> value;
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        returnValue(root);
        while(1)
        {
            if(value[root->left]>value[root->right])
                root = root->left;
            else if(value[root->left]<value[root->right])
                root = root->right;
            else
                return root;
        }
        return root;
    }
    int returnValue(TreeNode* root)
    {
        int vL = 0;
        int vR = 0;
        if(root->left!=NULL)
        {
            vL = returnValue(root->left);
            value[root->left] = vL;
        }
        if(root->right!=NULL)
        {
            vR = returnValue(root->right);
            value[root->right] = vR;
        }
        int vRoot = max(vL,vR);
        vRoot++;
        value[root] = vRoot;
        return vRoot;
    }
};
