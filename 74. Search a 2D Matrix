class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int left = 0;
        int right = matrix.size()-1;
        bool tag = 1;
        int mid = -1;
        int rowIndex = -1;
        if(target==matrix[left][0])
            return 1;
        if(target==matrix[right][0])        
            return 1;
        if(target<matrix[left][0])
            return 0;
        if(target>matrix[right][0])
        {
            tag = 0;
            rowIndex = right;
        }
        else if(left==right)
        {
            tag = 0;
            rowIndex = left;
        }
        while(tag)
        {
            if(right == left + 1)
            {
                tag = 0;
                rowIndex = left;
            }
            else
            {
                mid = (left + right) / 2;
                if(target==matrix[mid][0])
                    return 1;
                else if(target>matrix[mid][0])
                    left = mid;
                else 
                    right = mid;
            }
        }
        left = 0;
        right = matrix[0].size()-1;
        tag = 1;
        mid = -1;
        if(target==matrix[rowIndex][left])
            return 1;
        if(target==matrix[rowIndex][right])        
            return 1;
        if(target>matrix[rowIndex][right])
            return 0;
        else if(left==right)
            return 0;
        while(tag)
        {
            if(right == left + 1)
                return 0;
            else
            {
                mid = (left + right) / 2;
                if(target==matrix[rowIndex][mid])
                    return 1;
                else if(target>matrix[rowIndex][mid])
                    left = mid;
                else 
                    right = mid;
            }
        }
        return 0;
    }
};
