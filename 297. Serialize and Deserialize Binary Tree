/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string output = "";
        bool qIndex = 0;
        if(root==NULL)
            return output;
        vector<queue<TreeNode*>> q(2);
        q[qIndex].push(root);      
        output += to_string(q[qIndex].front()->val);
        string need2Add = "";
        while(!q[qIndex].empty())
        {                      
            bool check = 0;
            if(q[qIndex].front()->left==NULL)
                need2Add += "$n";
            else
            {
                check = 1;
                need2Add += ("$" + to_string(q[qIndex].front()->left->val));
                q[!qIndex].push(q[qIndex].front()->left);
            }                
            if(q[qIndex].front()->right==NULL)
                need2Add += "$n";
            else
            {
                check = 1;
                need2Add += ("$" + to_string(q[qIndex].front()->right->val));
                q[!qIndex].push(q[qIndex].front()->right);
            }   
            q[qIndex].pop();
            if(q[qIndex].empty())
            {
                if(check||!q[!qIndex].empty())
                    output += need2Add;
                qIndex = !qIndex;
                need2Add = "";
            }
        }
        //
        cout<<output<<endl;
        return output+"$";
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data == "")
            return NULL;
        int nowVal = 0;
        bool jump = 1;
        int startNum = 0;
        bool minus = 0;
        if(data[0]=='-')
        {
            minus = 1;
            startNum = 1;
        }
        for(int i=startNum;i<data.size()&&jump;i++)
        {
            startNum = i;
            if(data[i]=='$')
                jump = 0;
            else
            {
                nowVal *= 10;
                nowVal += data[i]-'0';
            }                
        }
        if(minus)
        {
            minus = 0;
            nowVal *= -1;
        }        
        TreeNode* root = new TreeNode(nowVal);
        nowVal = 0;
        queue<TreeNode*> q;
        bool leftOrRight = 0;
        q.push(root);
        for(int i = startNum+1;i<data.size();i++)
        {            
            if(data[i]=='-')
            {
                minus = 1;
            }
            else if(data[i]=='n')
            {
                if(leftOrRight)
                {     
                    q.pop();
                }
                leftOrRight = !leftOrRight;
                i++;
            }
            else if(data[i]=='$')
            {
                if(minus)
                    nowVal*=(-1);
                if(leftOrRight)
                {
                    q.front()->right = new TreeNode(nowVal);     
                    q.push(q.front()->right);  
                    q.pop();
                }
                else
                {
                    q.front()->left = new TreeNode(nowVal);
                    q.push(q.front()->left);  
                }
                leftOrRight = !leftOrRight;
                nowVal = 0;
                minus = 0;
            }
            else
            {
                nowVal *= 10;
                nowVal += data[i]-'0';
            }  
        }/*
        if(leftOrRight)
        {
            q.front()->right = new TreeNode(nowVal);    
        }
        else
        {
            q.front()->left = new TreeNode(nowVal);
        }*/
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
