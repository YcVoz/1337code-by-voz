class Solution {
public:
    int maxValue(int n, int index, int maxSum) {
        if(n>maxSum)
            return -373;
        int left = 1;
        int right = maxSum+1;
        long long mid;
        long long arr0 = -1;
        long long arrn = -1;
        long long sum0 = 0;
        long long sumn = 0;
        int index2 = n-index-1;
        while(left+1 != right){
            mid = (left+right)/2;
            arr0 = mid - index;            
            arrn = mid - index2;
            if(arr0<=0){
                sum0 = (1+mid)*mid/2 + index+1-mid;
            }
            else{
                sum0 = (arr0+mid)*(mid-arr0+1)/2;
            }
            if(arrn<=0){
                sumn = (1+mid)*mid/2 + index2+1-mid;
            }
            else{
                sumn = (arrn+mid)*(mid-arrn+1)/2;
            }
            if(sum0+sumn-mid<=maxSum){
                left = mid;
            }
            else
                right = mid;
        }
        return left;
    }
};
