class Solution {
public:
    vector<vector<string>> partition(string s) {
        int n = s.size();
        vector<vector<vector<string>>> v1(n);
        v1[0].resize(1);
        v1[0][0].emplace_back(s.substr(0,1));
        for(int j = 1;j<n;j++){
            for(int i = j;i>=0;i--){
                if(checkIfPalindrome(s.substr(i,j-i+1))){
                    if(i!=0){
                        for(int u = 0;u<v1[i-1].size();u++){
                            vector<string> tem = v1[i-1][u];
                            tem.emplace_back(s.substr(i,j-i+1));
                            v1[j].emplace_back(tem);
                        }
                    }     
                    else{
                        vector<string> tem(1);
                        tem[0] = s.substr(i,j-i+1);
                        v1[j].emplace_back(tem);
                    }
                }
            }
        }
        return v1[n-1];
    }
    bool checkIfPalindrome(string s){
        for(int i = 0;i<s.size()/2;i++){
            if(s[i]!=s[s.size()-1-i])
                return 0;
        }
        return 1;
    }
};
