/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool btreeGameWinningMove(TreeNode* root, int n, int x) {
        queue<TreeNode*> q1;
        bool notFound = 1;
        q1.push(root);
        TreeNode* thisNode;
        while(notFound){
            thisNode = q1.front();
            q1.pop();
            if(thisNode->val == x){            
                notFound = 0;
            }
            else{
                if(thisNode->left!=NULL){
                    q1.push(thisNode->left);
                }
                if(thisNode->right!=NULL){
                    q1.push(thisNode->right);
                }
            }
        }
        int leftCount = 0;
        if(thisNode->left!=NULL)
            leftCount = numofNode(thisNode->left);
        int rightCount = 0;
        if(thisNode->left!=NULL)
            rightCount = numofNode(thisNode->right);
        int parentCount = n - leftCount - rightCount - 1;
        if(leftCount>n/2 || rightCount>n/2 || parentCount>n/2 )
            return 1;
        return 0;
        }
    int numofNode(TreeNode* root){
        if (root==NULL)
            return 0;
        int count = 1;
        if(root->left!=NULL){
            count += numofNode(root->left);
        }
        if(root->right!=NULL){
            count += numofNode(root->right);
        }
        return count;
    }
};
