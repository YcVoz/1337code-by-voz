#define pii tuple<int,int,int>
class Solution {
public:
    vector<int>father;
    int findFather(int x)
    {
        return x == father[x] ? x : (father[x] = findFather(father[x]));
    }
    void Union(int x, int y)
    {
        x = findFather(x);
        y = findFather(y);
        if (x<y) father[y] = x;
        else father[x] = y;
    } 
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size();
        int ret = 0;
        priority_queue <pii, vector<pii>, greater<pii>> pq;
        father.resize(n);
        for(int i=0;i<n;i++){
            father[i] = i;
            for(int o=i+1;o<n;o++){
                int dis = abs(points[i][0]-points[o][0])+abs(points[i][1]-points[o][1]);
                pq.push(make_tuple(dis, i, o));                
            }
        }
        n--;
        while(n){
            int dis = get<0>(pq.top());
            int point1 = get<1>(pq.top());
            int point2 = get<2>(pq.top());
            pq.pop();
            if(findFather(point1)!=findFather(point2)){
                ret += dis;
                Union(point1,point2);
                n--; 
            }
        }
        return ret;
    }
};
