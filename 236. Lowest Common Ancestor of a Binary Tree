/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> vp;
    vector<TreeNode*> vq;
    vector<TreeNode*> now;
    bool pFinish = 0;
    bool qFinish = 0;
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==p)
            return p;
        if(root==q)
            return q;
        now.emplace_back(root);
        travel(root,p,q);
        int minn = min(vp.size(),vq.size());
        for(int i=0;i<minn;i++)
        {
            if(vp[i]!=vq[i])
                return vp[i-1];
        }
        return minn==vp.size()?p:q;
    }
    void travel(TreeNode* root, TreeNode* p, TreeNode* q){        
        if(root==p){
            vp = now;
            pFinish = 1;
        }    
        if(root==q){
            vq = now;
            qFinish = 1;
        }
        if(pFinish&&qFinish)
            return;
        if(root->left)
        {
            now.emplace_back(root->left);
            travel(root->left,p,q);
            now.resize(now.size()-1);
        }
        if(root->right)
        {
            now.emplace_back(root->right);
            travel(root->right,p,q);
            now.resize(now.size()-1);
        }
    }
};
