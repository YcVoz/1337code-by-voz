/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxAncestorDiff(TreeNode* root) {
        return getMaxMinDiff(root)[2];
    }
    vector<int> getMaxMinDiff(TreeNode* root){
        //max,min,maxDiff
        vector<int> vOut(3);
        vOut[0] = root->val;
        vOut[1] = root->val;
        vOut[2] = 0;
        if(root->left!=NULL)
        {
            vector<int> vtem = getMaxMinDiff(root->left);
            vOut[2] = vtem[2];
            if(vtem[0]>vOut[0])
                vOut[0] = vtem[0];
            if(vtem[1]<vOut[1])
                vOut[1] = vtem[1];
            if(abs(vtem[0]-root->val)>vOut[2])
                vOut[2] = abs(vtem[0]-root->val);
            if(abs(vtem[1]-root->val)>vOut[2])
                vOut[2] = abs(vtem[1]-root->val);
        }          
        if(root->right!=NULL)
        {
            vector<int> vtem = getMaxMinDiff(root->right);
            if(vtem[2]>vOut[2])
                vOut[2] = vtem[2];
            if(vtem[0]>vOut[0])
                vOut[0] = vtem[0];
            if(vtem[1]<vOut[1])
                vOut[1] = vtem[1];
            if(abs(vtem[0]-root->val)>vOut[2])
                vOut[2] = abs(vtem[0]-root->val);
            if(abs(vtem[1]-root->val)>vOut[2])
                vOut[2] = abs(vtem[1]-root->val);
        }          
        return vOut;
    }
};
