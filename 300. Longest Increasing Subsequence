class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> length_last(1);
        length_last[0] = nums[0];
        for(int i=0;i<nums.size();i++)
        {
            //for(int ii=0;ii<length_last.size();ii++)
            //{
            //    cout<<length_last[ii]<<" ";
            //}
            //cout<<endl;
            if(length_last.size()==1)
            {
                if(nums[i]<length_last[0])
                {
                    length_last[0] = nums[i];
                }
                else if(nums[i]>length_last[0])
                {
                    length_last.emplace_back(nums[i]);
                }
            }
            else
            {
                if(nums[i]>length_last[length_last.size()-1])
                {
                    length_last.emplace_back(nums[i]);
                }
                else
                {
                    int left = 0;
                    int right = length_last.size()-1;
                    bool tag = 1;
                    while(tag)
                    {
                        if((length_last[left] == nums[i])||(length_last[right] == nums[i]))
                        {
                            tag = 0;
                        }
                        else if(right-left==1)
                        {
                            tag = 0;
                            if(length_last[left] > nums[i])
                                length_last[left]  =  nums[i];
                            else
                                length_last[right] = nums[i];
                        }
                        else
                        {
                            int mid = (right+left)/2;
                            if(length_last[mid]==nums[i])
                            {
                                tag = 0;
                            }
                            else if(length_last[mid]<nums[i])
                            {
                                left = mid;
                            }
                            else
                            {
                                right = mid;
                            }
                        }
                    }
                }
            }
        }
        return length_last.size();
    }
};
