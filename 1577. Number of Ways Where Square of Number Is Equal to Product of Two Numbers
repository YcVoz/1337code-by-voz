class Solution {
public:
    int numTriplets(vector<int>& nums1, vector<int>& nums2) {
        vector<long long> v1(0);
        vector<long long> v2(0);
        map<long long,long long> m2;
        map<long long,long long> m1;
        map<long long,long long> m1_true;
        long long output = 0;
        for(int i=0;i<nums2.size();i++)
        {
            m2[nums2[i]]++;
            if(m2[nums2[i]]==1)
                v2.emplace_back(nums2[i]);
        }
        for(int i=0;i<v2.size();i++)
        {
            if(m2[v2[i]]>1)
                m1[v2[i]] += m2[v2[i]]*(m2[v2[i]]-1)/2;
            for(int u=i+1;u<v2.size();u++)
            {
                long long a = v2[i]*v2[u];
                if(pow(int(sqrt(a)),2)==a)
                    m1[sqrt(a)] += m2[v2[i]]*m2[v2[u]];
            }
        }        
        for(int i=0;i<nums1.size();i++)
        {
            m1_true[nums1[i]]++;
            if(m1_true[nums1[i]]==1)
                v1.emplace_back(nums1[i]);
        }
        for(auto iter = m1.begin();iter!=m1.end();iter++)
            output += (m1_true[iter->first]>0)?m1_true[iter->first]*iter->second:0;       
        for(int i=0;i<v1.size();i++)
        {
            if(m1_true[v1[i]]>1)
                output += m1_true[v1[i]]*(m1_true[v1[i]]-1)*m2[v1[i]]/2;
            for(int u=i+1;u<v1.size();u++)
            {
                long long a = v1[i]*v1[u];
                if(pow(int(sqrt(a)),2)==a)
                    output += m1_true[v1[i]]*m1_true[v1[u]]*m2[sqrt(a)];
            }
        }
        return output;
    }
};
