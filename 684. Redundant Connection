class Solution {
public:
    vector<int>father;
    int findFather(int x)
    {
        return x == father[x] ? x : (father[x] = findFather(father[x]));
    }
    void Union(int x, int y)
    {
        x = findFather(x);
        y = findFather(y);
        if (x<y) father[y] = x;
        else father[x] = y;
    } 
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> ret(2,0);
        father.resize(n);
        for(int i=0;i<n;i++)
            father[i] = i;
        for(int i=0;i<n;i++){            
            if(findFather(edges[i][0]-1)==findFather(edges[i][1]-1)){
                ret[0] = edges[i][0];
                ret[1] = edges[i][1];
                return ret;
            }
            Union(edges[i][0]-1,edges[i][1]-1);
        }
        return ret;
    }
};
