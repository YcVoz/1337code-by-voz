/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        int q1Size = 1;
        int ret = 0;
        queue<TreeNode*> q1;
        root->val = 1;
        q1.push(root);        
        while(!q1.empty()){
            q1Size = q1.size();
            int thisLevelMin=-1;
            int thisLevelMax=0;
            for(int i=0;i<q1Size;i++){
                TreeNode* tem = q1.front();
                q1.pop();
                if(tem->left){
                    thisLevelMax = (tem->val)*2;
                    if(-1==thisLevelMin)
                        thisLevelMin = thisLevelMax;
                    tem->left->val = thisLevelMax-thisLevelMin;
                    q1.push(tem->left);
                }
                if(tem->right){
                    thisLevelMax = (tem->val)*2+1;
                    if(thisLevelMin==-1)
                        thisLevelMin = thisLevelMax;
                    tem->right->val = thisLevelMax-thisLevelMin;
                    q1.push(tem->right);
                }
            }
            thisLevelMin = max(thisLevelMin,0);
            ret = max(ret,thisLevelMax-thisLevelMin+1);
        }
        return ret;
    }
};
  
