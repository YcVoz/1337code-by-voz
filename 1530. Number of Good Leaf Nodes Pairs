/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countPairs(TreeNode* root, int distance) {
        return helper(root,distance).first;
    }
    pair<int,map<int,int>> helper(TreeNode* root, int distance)
    {      
        pair<int,map<int,int>> outputput;  
        int output = 0;
        map<int,int> m1;
        if(root->left!=NULL&&root->right!=NULL)
        {            
            pair<int,map<int,int>> leftt = helper(root->left,distance);
            pair<int,map<int,int>>rightt = helper(root->right,distance);
            output = leftt.first + rightt.first;
            for(auto iter = leftt.second.begin();iter != leftt.second.end();iter++)
                m1[iter->first+1]+=iter->second;
            for(auto iter = rightt.second.begin();iter != rightt.second.end();iter++)
            {
                m1[iter->first+1]+=iter->second;
                bool jump = 1;
                for(auto iter2 = leftt.second.begin();jump&&iter2 != leftt.second.end();iter2++)
                {
                    if(iter2->first+iter->first+2<=distance)
                        output += iter2->second*iter->second;
                    else
                        jump = 0;
                }
            }
        }
        else if(root->left==NULL&&root->right!=NULL)
        {
            pair<int,map<int,int>>rightt = helper(root->right,distance);
            output = rightt.first;
            for(auto iter = rightt.second.begin();iter != rightt.second.end();iter++)
                m1[iter->first+1]+=iter->second;
        }
        else if(root->left!=NULL&&root->right==NULL)
        {
            pair<int,map<int,int>>leftt = helper(root->left,distance);
            output = leftt.first;
            for(auto iter = leftt.second.begin();iter != leftt.second.end();iter++)
                m1[iter->first+1]+=iter->second;            
        }
        else            
            m1[0] = 1;
        outputput=make_pair(output,m1);
        return outputput;
    }
};
