class Solution {
public:
    int maxProductPath(vector<vector<int>>& grid) {
        vector<vector<vector<long long>>> dp(2,vector<vector<long long>>(grid.size(),vector<long long>(grid[0].size(),0)));
        dp[0][0][0] = grid[0][0];        
        dp[1][0][0] = grid[0][0];
        for(int i=1;i<grid.size();i++)
        {
            dp[0][i][0] = dp[0][i-1][0]*grid[i][0];
            dp[1][i][0] = dp[1][i-1][0]*grid[i][0];
        }
        for(int i=1;i<grid[0].size();i++)
        {
            dp[1][0][i] = dp[1][0][i-1]*grid[0][i];
            dp[0][0][i] = dp[0][0][i-1]*grid[0][i];
        }        
        for(int i=1;i<grid.size();i++)
        {
            for(int u=1;u<grid[0].size();u++)
            {
                long long a = dp[0][i-1][u]*grid[i][u];
                long long b = dp[1][i-1][u]*grid[i][u];
                long long c = dp[0][i][u-1]*grid[i][u];
                long long d = dp[1][i][u-1]*grid[i][u];
                long long max = a;
                if(b>max)
                    max = b;
                if(c>max)
                    max = c;
                if(d>max)
                    max = d;
                dp[1][i][u] = max;
                max = a;
                if(b<max)
                    max = b;
                if(c<max)
                    max = c;
                if(d<max)
                    max = d;      
                dp[0][i][u] = max;          
            }
        }
        if(dp[1][grid.size()-1][grid[0].size()-1]<0)
            return -1;
        return dp[1][grid.size()-1][grid[0].size()-1]%(1000000000+7);
    }
};
